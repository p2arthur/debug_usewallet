/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "mutation UserLogin($address: AlgorandAddress!, $password: String, $txn: SignedTxn) {\n  userLogin(address: $address, password: $password, txn: $txn) {\n    authToken\n    exp\n    user {\n      walletAddress\n      artist {\n        name\n        normalizedName\n        location\n        joinDate\n        page {\n          description\n          profileImage {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n          bannerImage {\n            cid\n            mimeType\n            previews {\n              cid\n              size\n              mimeType\n            }\n          }\n          customLinks {\n            name\n            url\n          }\n        }\n      }\n      collector {\n        banned\n        page {\n          overWriteNfdomains\n          description\n        }\n      }\n      generalStats {\n        followers\n        following\n      }\n      fileroom {\n        id\n        token\n      }\n      isAdmin\n      isArtist\n      isDev\n    }\n  }\n}": types.UserLoginDocument,
    "mutation ChangeApplicationStatus($id: ObjectId!, $status: ApplicationStatuses!) {\n  changeApplicationStatus(id: $id, status: $status) {\n    id\n    name\n    email\n    status\n    twitter\n    instagram\n    links\n    art\n    inviteLink\n    accountCreated\n  }\n}": types.ChangeApplicationStatusDocument,
    "mutation InviteArtist($name: String!, $email: EmailAddress!) {\n  inviteArtist(name: $name, email: $email) {\n    id\n    name\n    email\n    status\n    twitter\n    instagram\n    links\n    art\n    inviteLink\n    accountCreated\n  }\n}": types.InviteArtistDocument,
    "mutation CreateApplication($name: String!, $email: EmailAddress!) {\n  createApplication(name: $name, email: $email)\n}": types.CreateApplicationDocument,
    "mutation CreateArtistAccount($id: ObjectId!, $token: String!, $name: String!, $password: String!, $address: AlgorandAddress!, $txn: SignedTxn!) {\n  createArtistAccount(\n    id: $id\n    token: $token\n    name: $name\n    password: $password\n    address: $address\n    txn: $txn\n  )\n}": types.CreateArtistAccountDocument,
    "mutation SaveApplicationLinks($id: ObjectId!, $token: String!, $links: String!) {\n  saveApplicationLinks(id: $id, token: $token, links: $links)\n}": types.SaveApplicationLinksDocument,
    "mutation SubmitApplicationSocials($id: ObjectId!, $token: String!, $links: String!) {\n  submitApplicationSocials(id: $id, token: $token, links: $links)\n}": types.SubmitApplicationSocialsDocument,
    "mutation UpdateArtistSettings($settings: ArtistSettingsInput!) {\n  updateArtistSettings(settings: $settings) {\n    name\n    normalizedName\n    location\n    joinDate\n    page {\n      description\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      bannerImage {\n        cid\n        mimeType\n        previews {\n          cid\n          size\n          mimeType\n        }\n      }\n      customLinks {\n        name\n        url\n      }\n    }\n    stats {\n      totalMinted\n      totalSold\n      floor\n    }\n    featured {\n      isFeatured\n      categories\n    }\n  }\n}": types.UpdateArtistSettingsDocument,
    "mutation CreateBand($name: String!, $wallets: [String!]!, $asas: [String!]!, $period: Int!, $asaAmount: Int!, $coin: Float!) {\n  createBand(\n    name: $name\n    wallets: $wallets\n    asas: $asas\n    period: $period\n    asaAmount: $asaAmount\n    coin: $coin\n  )\n}": types.CreateBandDocument,
    "mutation DeleteCollection($id: ObjectId!) {\n  deleteCollection(id: $id)\n}": types.DeleteCollectionDocument,
    "mutation UpsertCollection($id: ObjectId, $settings: CollectionSettingsInput!) {\n  upsertCollection(id: $id, settings: $settings) {\n    id\n    title\n    normalizedTitle\n    description\n    private\n    locked\n    rarity\n    type\n    mintingAddresses {\n      address\n      active\n      locked\n    }\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        locked\n        rarityScore\n      }\n      range {\n        max\n        min\n        usedValues\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      status\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}": types.UpsertCollectionDocument,
    "mutation CreateNewNFT($settings: NFTSettingsInput!) {\n  createNewNFT(settings: $settings) {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}": types.CreateNewNftDocument,
    "mutation DeleteNFTs($ids: [ObjectId!]!) {\n  deleteNFTs(ids: $ids)\n}": types.DeleteNfTsDocument,
    "mutation EditNFT($id: ObjectId!, $settings: NFTSettingsInput!) {\n  editNFT(id: $id, settings: $settings) {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}": types.EditNftDocument,
    "mutation SubmitDeleteNFT($txns: [[SignedTxn!]!]!) {\n  submitDeleteNFT(txns: $txns) {\n    indexes\n    partialErrors\n  }\n}": types.SubmitDeleteNftDocument,
    "mutation SubmitMintNFT($txns: [[SignedTxn!]!]!) {\n  submitMintNFT(txns: $txns) {\n    nfts {\n      id\n      status\n      stage\n      edit {\n        info\n        collection\n        media\n        token\n      }\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n      }\n      token {\n        unitName\n        assetName\n        royalty\n        editions\n      }\n      artist {\n        id\n        name\n        normalizedName\n        address\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      c {\n        id\n        title\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n    }\n    partialErrors\n  }\n}": types.SubmitMintNftDocument,
    "mutation SubmitBuyFixedBid($txns: [[SignedTxn!]!]!) {\n  submitBuyFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}": types.SubmitBuyFixedBidDocument,
    "mutation SubmitDeployFixedBid($txns: [[SignedTxn!]!]!) {\n  submitDeployFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}": types.SubmitDeployFixedBidDocument,
    "mutation SubmitDepositFixedBid($txns: [[SignedTxn!]!]!) {\n  submitDepositFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}": types.SubmitDepositFixedBidDocument,
    "mutation SubmitDestroyFixedBid($txns: [[SignedTxn!]!]!) {\n  submitDestroyFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}": types.SubmitDestroyFixedBidDocument,
    "mutation SubmitExtractFixedBid($txns: [[SignedTxn!]!]!) {\n  submitExtractFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}": types.SubmitExtractFixedBidDocument,
    "mutation SubmitSetupFixedBid($txns: [[SignedTxn!]!]!) {\n  submitSetupFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}": types.SubmitSetupFixedBidDocument,
    "mutation SubmitUpdatePriceFixedBid($txns: [[SignedTxn!]!]!) {\n  submitUpdatePriceFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}": types.SubmitUpdatePriceFixedBidDocument,
    "mutation AddNotificationSubscription($subscription: NotificationSubscription!) {\n  addNotificationSubscription(subscription: $subscription) {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}": types.AddNotificationSubscriptionDocument,
    "mutation RemoveNotificationSubscription($subscriptionHash: String!) {\n  removeNotificationSubscription(subscriptionHash: $subscriptionHash) {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}": types.RemoveNotificationSubscriptionDocument,
    "mutation UpdateNotificationCategories($categories: [NotificationCategoryInput!]!) {\n  updateNotificationCategories(categories: $categories) {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}": types.UpdateNotificationCategoriesDocument,
    "mutation SubmitDestroyV1Listing($txns: [[SignedTxn!]!]!) {\n  submitDestroyV1Listing(txns: $txns) {\n    listings {\n      index\n      listingAddress\n      listingProgram\n      listerAddress\n      price\n      fundingHistory {\n        date\n        amount\n      }\n      sellHistory {\n        date\n        amount\n        address\n      }\n      buyLimit\n      buyLimitOn\n      limitList {\n        amount\n        address\n      }\n    }\n    partialErrors\n  }\n}": types.SubmitDestroyV1ListingDocument,
    "query UserLoginInfo($address: AlgorandAddress!) {\n  userLoginInfo(address: $address) {\n    walletAddress\n    hasPassword\n    newUser\n  }\n  verifyTxn(address: $address) {\n    description\n    txID\n    blob\n    signers\n    signature\n    authAddress\n  }\n}": types.UserLoginInfoDocument,
    "query GetApplications($status: [ApplicationStatuses!], $offset: Int, $limit: Int) {\n  getApplications(status: $status, offset: $offset, limit: $limit) {\n    applications {\n      id\n      name\n      email\n      status\n      twitter\n      instagram\n      links\n      art\n      inviteLink\n      accountCreated\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetApplicationsDocument,
    "query GetBands($status: [BandStatuses!], $offset: Int, $limit: Int) {\n  getBands(status: $status, offset: $offset, limit: $limit) {\n    bands {\n      id\n      name\n      status\n      period\n      date {\n        startDate\n        endDate\n      }\n      wallets\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetBandsDocument,
    "query GetArtistDetails($id: String!) {\n  getArtistDetails(id: $id) {\n    walletAddress\n    artist {\n      name\n      normalizedName\n      page {\n        description\n        twitter\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        bannerImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        customLinks {\n          name\n          url\n        }\n      }\n      stats {\n        totalMinted\n        totalSold\n        floor\n      }\n      location\n      joinDate\n      featured {\n        isFeatured\n        categories\n      }\n    }\n    generalStats {\n      followers\n      following\n    }\n  }\n}": types.GetArtistDetailsDocument,
    "query GetArtistSettings {\n  getArtistSettings {\n    name\n    normalizedName\n    location\n    joinDate\n    page {\n      description\n      twitter\n      profileImage {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      bannerImage {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          cid\n          size\n          mimeType\n        }\n      }\n      customLinks {\n        name\n        url\n      }\n    }\n    stats {\n      totalMinted\n      totalSold\n      floor\n    }\n    featured {\n      isFeatured\n      categories\n    }\n  }\n}": types.GetArtistSettingsDocument,
    "query GetFeaturedArtists($skip: [ObjectId!], $limit: Int) {\n  getFeaturedArtists(skip: $skip, limit: $limit) {\n    id\n    title\n    normalizedTitle\n    artists {\n      name\n      normalizedName\n      page {\n        description\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        bannerImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        customLinks {\n          name\n          url\n        }\n      }\n      stats {\n        totalMinted\n        totalSold\n        floor\n      }\n      location\n      joinDate\n      featured {\n        isFeatured\n        categories\n      }\n    }\n  }\n}": types.GetFeaturedArtistsDocument,
    "query GetTwitterVerificationLink {\n  getTwitterVerificationLink\n}": types.GetTwitterVerificationLinkDocument,
    "query SearchArtist($searchTerm: String!) {\n  searchArtist(searchTerm: $searchTerm) {\n    name\n    normalizedName\n    page {\n      description\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      bannerImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      customLinks {\n        name\n        url\n      }\n    }\n    stats {\n      totalMinted\n      totalSold\n      floor\n    }\n    location\n    joinDate\n    featured {\n      isFeatured\n      categories\n    }\n  }\n}": types.SearchArtistDocument,
    "query GetAllCollections($limit: Int, $offset: Int, $sort: CollectionSort, $skip: [String!]) {\n  getAllCollections(limit: $limit, offset: $offset, sort: $sort, skip: $skip) {\n    collections {\n      id\n      title\n      normalizedTitle\n      description\n      rarity\n      attributes {\n        traitType\n        displayType\n        values {\n          value\n          rarityScore\n        }\n        range {\n          max\n          min\n        }\n      }\n      media {\n        card {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        banner {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      artists {\n        id\n        address\n        name\n        normalizedName\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      stats {\n        nNFTs\n        sales\n        floor\n        volume\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetAllCollectionsDocument,
    "query GetCollectionDetails($id: String!) {\n  getCollectionDetails(id: $id) {\n    id\n    title\n    normalizedTitle\n    description\n    rarity\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        rarityScore\n      }\n      range {\n        max\n        min\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}": types.GetCollectionDetailsDocument,
    "query GetCollectionsByArtist($id: String!, $limit: Int, $offset: Int) {\n  getCollectionsByArtist(id: $id, limit: $limit, offset: $offset) {\n    collections {\n      id\n      title\n      normalizedTitle\n      description\n      rarity\n      attributes {\n        traitType\n        displayType\n        values {\n          value\n          rarityScore\n        }\n        range {\n          max\n          min\n        }\n      }\n      media {\n        card {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        banner {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      artists {\n        id\n        address\n        name\n        normalizedName\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      stats {\n        nNFTs\n        sales\n        floor\n        volume\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetCollectionsByArtistDocument,
    "query SearchCollection($searchTerm: String!) {\n  searchCollection(searchTerm: $searchTerm) {\n    id\n    title\n    normalizedTitle\n    description\n    rarity\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        rarityScore\n      }\n      range {\n        max\n        min\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}": types.SearchCollectionDocument,
    "query GetCollectionSettings($id: ObjectId) {\n  getCollectionSettings(id: $id) {\n    id\n    title\n    normalizedTitle\n    description\n    private\n    locked\n    rarity\n    type\n    mintingAddresses {\n      address\n      active\n      locked\n    }\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        locked\n        rarityScore\n      }\n      range {\n        max\n        min\n        usedValues\n      }\n    }\n    media {\n      card {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      status\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}": types.GetCollectionSettingsDocument,
    "query GetUserCollections {\n  getUserCollections {\n    id\n    title\n    normalizedTitle\n    description\n    private\n    locked\n    rarity\n    type\n    mintingAddresses {\n      address\n      active\n      locked\n    }\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        locked\n        rarityScore\n      }\n      range {\n        max\n        min\n        usedValues\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      status\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}": types.GetUserCollectionsDocument,
    "query GetConceptNFTs($offset: Int, $limit: Int) {\n  getConceptNFTs(offset: $offset, limit: $limit) {\n    nfts {\n      id\n      status\n      stage\n      edit {\n        info\n        collection\n        media\n        token\n      }\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n      }\n      token {\n        unitName\n        assetName\n        royalty\n        editions\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      c {\n        id\n        title\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            cid\n            mimeType\n            size\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetConceptNfTsDocument,
    "query GetDeleteNFTParams($indexes: [Int!]!) {\n  getDeleteNFTParams(indexes: $indexes) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}": types.GetDeleteNftParamsDocument,
    "query GetMintNFTParams($ids: [ObjectId!]!) {\n  getMintNFTParams(ids: $ids) {\n    description\n    txID\n    signers\n    signature\n    authAddress\n    blob\n  }\n}": types.GetMintNftParamsDocument,
    "query GetNFTSettings($id: ObjectId!) {\n  getNFTSettings(id: $id) {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}": types.GetNftSettingsDocument,
    "query GetNFTTemplate {\n  getNFTTemplate {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}": types.GetNftTemplateDocument,
    "query GetBuyFixedBidParams($settings: [BuyFixedBidParams!]!) {\n  getBuyFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}": types.GetBuyFixedBidParamsDocument,
    "query GetDeployFixedBidParams($settings: [DeployFixedBidParams!]!) {\n  getDeployFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}": types.GetDeployFixedBidParamsDocument,
    "query GetDepositFixedBidParams($settings: [DepositFixedBidParams!]!) {\n  getDepositFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}": types.GetDepositFixedBidParamsDocument,
    "query GetDestroyFixedBidParams($settings: [DestroyFixedBidParams!]!) {\n  getDestroyFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}": types.GetDestroyFixedBidParamsDocument,
    "query GetExtractFixedBidParams($settings: [ExtractFixedBidParams!]!) {\n  getExtractFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}": types.GetExtractFixedBidParamsDocument,
    "query GetFixedBidsByArtist($address: AlgorandAddress!, $offset: Int, $limit: Int) {\n  getFixedBidsByArtist(address: $address, offset: $offset, limit: $limit) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n      nft {\n        id\n        info {\n          title\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetFixedBidsByArtistDocument,
    "query GetFixedBidsByCollector($address: AlgorandAddress!, $offset: Int, $limit: Int) {\n  getFixedBidsByCollector(address: $address, offset: $offset, limit: $limit) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n      nft {\n        id\n        info {\n          title\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetFixedBidsByCollectorDocument,
    "query GetFixedBidsByNFT($index: Int!) {\n  getFixedBidsByNFT(index: $index) {\n    nftIndex\n    appId\n    currency\n    sellerAddress\n    sellerPayoutAddress\n    royaltyPayoutAddress\n    managerPayoutAddress\n    sellerRevenueSink\n    royaltyRevenueSink\n    contractAddress\n    sellerShare\n    royaltyShare\n    managerShare\n    price\n    primary\n    status {\n      deleted\n      isSetup\n      balance\n    }\n  }\n}": types.GetFixedBidsByNftDocument,
    "query GetSetupFixedBidParams($settings: [SetupFixedBidParams!]!) {\n  getSetupFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}": types.GetSetupFixedBidParamsDocument,
    "query GetUpdatePriceFixedBidParams($settings: [UpdatePriceFixedBidParams!]!) {\n  getUpdatePriceFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}": types.GetUpdatePriceFixedBidParamsDocument,
    "query GetCollectedNFTs($address: AlgorandAddress!, $offset: Int, $limit: Int) {\n  getCollectedNFTs(address: $address, offset: $offset, limit: $limit) {\n    nfts {\n      nft {\n        id\n        info {\n          title\n          description\n          link\n          nsfw\n          ai\n          aiDescription\n          tags\n          updated\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        artist {\n          id\n          address\n          name\n          normalizedName\n          suspended\n          deleted\n          profileImage {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n        card {\n          x\n          y\n          type\n        }\n        c {\n          id\n          title\n          normalizedTitle\n          attributes {\n            traitType\n            value\n            displayType\n          }\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              cid\n              mimeType\n              size\n            }\n          }\n        }\n        metadata {\n          id\n          cid\n          mimeType\n          integrity\n          standard\n        }\n        listings {\n          listed\n          fixedBid {\n            primary\n            currency\n            price\n          }\n          auctions {\n            primary\n            currency\n            price\n            duration\n            highestBid\n            started\n          }\n        }\n        statistics {\n          sold\n          latestSale {\n            currency\n            price\n            usdValue\n          }\n        }\n        status\n      }\n      balance\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetCollectedNfTsDocument,
    "query GetCreatedNFTs($offset: Int, $limit: Int) {\n  getCreatedNFTs(offset: $offset, limit: $limit) {\n    nfts {\n      nft {\n        id\n        info {\n          title\n          description\n          link\n          nsfw\n          ai\n          aiDescription\n          tags\n          updated\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        artist {\n          id\n          address\n          name\n          normalizedName\n          suspended\n          deleted\n          profileImage {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n        card {\n          x\n          y\n          type\n        }\n        c {\n          id\n          title\n          attributes {\n            traitType\n            value\n            displayType\n          }\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              cid\n              mimeType\n              size\n            }\n          }\n        }\n        metadata {\n          id\n          cid\n          mimeType\n          integrity\n          standard\n        }\n        listings {\n          listed\n          fixedBid {\n            primary\n            currency\n            price\n          }\n          auctions {\n            primary\n            currency\n            price\n            duration\n            highestBid\n            started\n          }\n        }\n        statistics {\n          sold\n          latestSale {\n            currency\n            price\n            usdValue\n          }\n        }\n        status\n      }\n      balance\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetCreatedNfTsDocument,
    "query GetNFDByAddress($address: AlgorandAddress!) {\n  getNFDByAddress(address: $address) {\n    address\n    nfd {\n      i {\n        name\n        asaId\n        category\n        commission1Agent\n        commission1\n        mintingKickoffCreator\n        mintingKickoffAmount\n        highestSoldAmt\n        owner\n        sellamt\n        saleType\n        seller\n        timeCreated\n        timeChanged\n        timePurchased\n        ver\n        contractLocked\n      }\n      u {\n        name\n        bio\n        address\n        email\n        url\n        avatar\n        banner\n        twitter\n        discord\n        telegram\n        domain\n        website\n        caalgo\n      }\n      v {\n        avatar\n        avatarasaid\n        banner\n        bannerasaid\n        caAlgo\n        domain\n        twitter\n        discord\n        telegram\n      }\n    }\n  }\n}": types.GetNfdByAddressDocument,
    "query GetNFDListByAddresses($addresses: [AlgorandAddress!]!) {\n  getNFDListByAddresses(addresses: $addresses) {\n    address\n    nfd {\n      i {\n        name\n      }\n    }\n  }\n}": types.GetNfdListByAddressesDocument,
    "query GetAllNFTs($limit: Int, $offset: Int, $sort: AllNFTSort) {\n  getAllNFTs(limit: $limit, offset: $offset, sort: $sort) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n      status\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetAllNfTsDocument,
    "query GetListedNFTs($listingType: ListingType!, $limit: Int!, $offset: Int!, $skip: [String!]) {\n  getListedNFTs(\n    listingType: $listingType\n    limit: $limit\n    offset: $offset\n    skip: $skip\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n      status\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetListedNfTsDocument,
    "query GetNFTDetails($index: Int!) {\n  getNFTDetails(index: $index) {\n    id\n    status\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n      updated\n    }\n    token {\n      index\n      unitName\n      assetName\n      royalty\n      editions\n      mintAddress\n      timestamp\n    }\n    artist {\n      id\n      address\n      name\n      normalizedName\n      suspended\n      deleted\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    c {\n      id\n      title\n      normalizedTitle\n      attributes {\n        traitType\n        value\n        displayType\n      }\n      card {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    metadata {\n      id\n      cid\n      mimeType\n      integrity\n      standard\n    }\n    listings {\n      listed\n      fixedBid {\n        primary\n        currency\n        price\n      }\n      auctions {\n        primary\n        currency\n        price\n        duration\n        highestBid\n        started\n      }\n    }\n    statistics {\n      sold\n      latestSale {\n        currency\n        price\n        usdValue\n      }\n    }\n  }\n}": types.GetNftDetailsDocument,
    "query GetNFTOwners($index: Int!) {\n  getNFTOwners(index: $index) {\n    address\n    walletBalance\n    listingBalance\n  }\n}": types.GetNftOwnersDocument,
    "query GetNFTsByArtist($id: String!, $limit: Int!, $offset: Int!, $sort: NFTSort, $status: NFTSaleStatus) {\n  getNFTsByArtist(\n    id: $id\n    limit: $limit\n    offset: $offset\n    sort: $sort\n    status: $status\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetNfTsByArtistDocument,
    "query GetNFTsByCollection($id: String!, $limit: Int!, $offset: Int!, $sort: NFTSort, $status: NFTSaleStatus) {\n  getNFTsByCollection(\n    id: $id\n    limit: $limit\n    offset: $offset\n    sort: $sort\n    status: $status\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetNfTsByCollectionDocument,
    "query GetNFTsByCollector($id: AlgorandAddress!, $limit: Int!, $offset: Int!, $sort: NFTCollectedSort, $status: NFTCollectedStatus) {\n  getNFTsByCollector(\n    id: $id\n    limit: $limit\n    offset: $offset\n    sort: $sort\n    status: $status\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetNfTsByCollectorDocument,
    "query SearchNFT($searchTerm: String!) {\n  searchNFT(searchTerm: $searchTerm) {\n    id\n    info {\n      title\n    }\n    token {\n      index\n    }\n    artist {\n      name\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}": types.SearchNftDocument,
    "query GetNotificationSettings {\n  getNotificationSettings {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}": types.GetNotificationSettingsDocument,
    "query TestNotification {\n  testNotification\n}": types.TestNotificationDocument,
    "query GetCurrentQuotes($fiat: [FiatCode!]!, $asa: [AsaCode!]!) {\n  getCurrentQuotes(fiat: $fiat, asa: $asa) {\n    timestamp\n    quotes\n  }\n}": types.GetCurrentQuotesDocument,
    "query GetHistoricalQuotes($fiat: [FiatCode!]!, $asa: [AsaCode!]!, $range: TimeRange!) {\n  getHistoricalQuotes(fiat: $fiat, asa: $asa, range: $range) {\n    timestamp\n    quotes\n  }\n}": types.GetHistoricalQuotesDocument,
    "query GetAllSales($offset: Int, $limit: Int, $sort: SaleSortingOptions, $filter: SaleFilter) {\n  getAllSales(offset: $offset, limit: $limit, sort: $sort, filter: $filter) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n      nft {\n        token {\n          index\n        }\n        info {\n          title\n          nsfw\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            fileroomId\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetAllSalesDocument,
    "query GetSalesByArtist($id: String!, $offset: Int, $limit: Int) {\n  getSalesByArtist(id: $id, offset: $offset, limit: $limit) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n      nft {\n        token {\n          index\n        }\n        info {\n          title\n          nsfw\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            fileroomId\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetSalesByArtistDocument,
    "query GetSalesByCollection($id: String!, $offset: Int, $limit: Int) {\n  getSalesByCollection(id: $id, offset: $offset, limit: $limit) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n      nft {\n        token {\n          index\n        }\n        info {\n          title\n          nsfw\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            fileroomId\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetSalesByCollectionDocument,
    "query GetSalesByNFT($limit: Int, $index: Int!, $offset: Int) {\n  getSalesByNFT(limit: $limit, index: $index, offset: $offset) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}": types.GetSalesByNftDocument,
    "query GetDestroyV1ListingParams($settings: [DestroyV1ListingParams!]!) {\n  getDestroyV1ListingParams(settings: $settings) {\n    description\n    txID\n    signers\n    signature\n    authAddress\n    blob\n  }\n}": types.GetDestroyV1ListingParamsDocument,
    "query GetV1ListingsByAddress($address: AlgorandAddress) {\n  getV1ListingsByAddress(address: $address) {\n    index\n    listingAddress\n    listingProgram\n    listerAddress\n    price\n    fundingHistory {\n      date\n      amount\n    }\n    sellHistory {\n      date\n      amount\n      address\n    }\n    buyLimit\n    buyLimitOn\n    limitList {\n      amount\n      address\n    }\n  }\n}": types.GetV1ListingsByAddressDocument,
    "query VerifyTxn($address: AlgorandAddress!) {\n  verifyTxn(address: $address) {\n    description\n    txID\n    blob\n    signers\n    signature\n    authAddress\n  }\n}": types.VerifyTxnDocument,
    "query ViewApplicationStatus($id: ObjectId!, $token: String!) {\n  viewApplicationStatus(id: $id, token: $token) {\n    status\n    emailVerified\n    socialsAdded\n    requiresArt\n    artUploaded\n    links\n    instagram\n    twitter\n  }\n}": types.ViewApplicationStatusDocument,
    "subscription NewApplications {\n  newApplications {\n    id\n    name\n    email\n    status\n    twitter\n    instagram\n    links\n    art\n  }\n}": types.NewApplicationsDocument,
    "subscription NewBands {\n  newBands {\n    id\n    name\n    status\n  }\n}": types.NewBandsDocument,
    "subscription SubAllNewSales {\n  subAllNewSales {\n    saleType\n    nftIndex\n    appId\n    currency\n    unitPrice\n    nNFTs\n    totalPrice\n    totalValue\n    txIDs\n    groupId\n    sellerAddress\n    royaltyAddres\n    buyerAddress\n    sellerShare\n    royaltyShare\n    managerShare\n    round\n    timestamp\n    primary\n    nft {\n      token {\n        index\n      }\n      info {\n        title\n        nsfw\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          fileroomId\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n    }\n  }\n}": types.SubAllNewSalesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UserLogin($address: AlgorandAddress!, $password: String, $txn: SignedTxn) {\n  userLogin(address: $address, password: $password, txn: $txn) {\n    authToken\n    exp\n    user {\n      walletAddress\n      artist {\n        name\n        normalizedName\n        location\n        joinDate\n        page {\n          description\n          profileImage {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n          bannerImage {\n            cid\n            mimeType\n            previews {\n              cid\n              size\n              mimeType\n            }\n          }\n          customLinks {\n            name\n            url\n          }\n        }\n      }\n      collector {\n        banned\n        page {\n          overWriteNfdomains\n          description\n        }\n      }\n      generalStats {\n        followers\n        following\n      }\n      fileroom {\n        id\n        token\n      }\n      isAdmin\n      isArtist\n      isDev\n    }\n  }\n}"): (typeof documents)["mutation UserLogin($address: AlgorandAddress!, $password: String, $txn: SignedTxn) {\n  userLogin(address: $address, password: $password, txn: $txn) {\n    authToken\n    exp\n    user {\n      walletAddress\n      artist {\n        name\n        normalizedName\n        location\n        joinDate\n        page {\n          description\n          profileImage {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n          bannerImage {\n            cid\n            mimeType\n            previews {\n              cid\n              size\n              mimeType\n            }\n          }\n          customLinks {\n            name\n            url\n          }\n        }\n      }\n      collector {\n        banned\n        page {\n          overWriteNfdomains\n          description\n        }\n      }\n      generalStats {\n        followers\n        following\n      }\n      fileroom {\n        id\n        token\n      }\n      isAdmin\n      isArtist\n      isDev\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation ChangeApplicationStatus($id: ObjectId!, $status: ApplicationStatuses!) {\n  changeApplicationStatus(id: $id, status: $status) {\n    id\n    name\n    email\n    status\n    twitter\n    instagram\n    links\n    art\n    inviteLink\n    accountCreated\n  }\n}"): (typeof documents)["mutation ChangeApplicationStatus($id: ObjectId!, $status: ApplicationStatuses!) {\n  changeApplicationStatus(id: $id, status: $status) {\n    id\n    name\n    email\n    status\n    twitter\n    instagram\n    links\n    art\n    inviteLink\n    accountCreated\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation InviteArtist($name: String!, $email: EmailAddress!) {\n  inviteArtist(name: $name, email: $email) {\n    id\n    name\n    email\n    status\n    twitter\n    instagram\n    links\n    art\n    inviteLink\n    accountCreated\n  }\n}"): (typeof documents)["mutation InviteArtist($name: String!, $email: EmailAddress!) {\n  inviteArtist(name: $name, email: $email) {\n    id\n    name\n    email\n    status\n    twitter\n    instagram\n    links\n    art\n    inviteLink\n    accountCreated\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateApplication($name: String!, $email: EmailAddress!) {\n  createApplication(name: $name, email: $email)\n}"): (typeof documents)["mutation CreateApplication($name: String!, $email: EmailAddress!) {\n  createApplication(name: $name, email: $email)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateArtistAccount($id: ObjectId!, $token: String!, $name: String!, $password: String!, $address: AlgorandAddress!, $txn: SignedTxn!) {\n  createArtistAccount(\n    id: $id\n    token: $token\n    name: $name\n    password: $password\n    address: $address\n    txn: $txn\n  )\n}"): (typeof documents)["mutation CreateArtistAccount($id: ObjectId!, $token: String!, $name: String!, $password: String!, $address: AlgorandAddress!, $txn: SignedTxn!) {\n  createArtistAccount(\n    id: $id\n    token: $token\n    name: $name\n    password: $password\n    address: $address\n    txn: $txn\n  )\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SaveApplicationLinks($id: ObjectId!, $token: String!, $links: String!) {\n  saveApplicationLinks(id: $id, token: $token, links: $links)\n}"): (typeof documents)["mutation SaveApplicationLinks($id: ObjectId!, $token: String!, $links: String!) {\n  saveApplicationLinks(id: $id, token: $token, links: $links)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitApplicationSocials($id: ObjectId!, $token: String!, $links: String!) {\n  submitApplicationSocials(id: $id, token: $token, links: $links)\n}"): (typeof documents)["mutation SubmitApplicationSocials($id: ObjectId!, $token: String!, $links: String!) {\n  submitApplicationSocials(id: $id, token: $token, links: $links)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateArtistSettings($settings: ArtistSettingsInput!) {\n  updateArtistSettings(settings: $settings) {\n    name\n    normalizedName\n    location\n    joinDate\n    page {\n      description\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      bannerImage {\n        cid\n        mimeType\n        previews {\n          cid\n          size\n          mimeType\n        }\n      }\n      customLinks {\n        name\n        url\n      }\n    }\n    stats {\n      totalMinted\n      totalSold\n      floor\n    }\n    featured {\n      isFeatured\n      categories\n    }\n  }\n}"): (typeof documents)["mutation UpdateArtistSettings($settings: ArtistSettingsInput!) {\n  updateArtistSettings(settings: $settings) {\n    name\n    normalizedName\n    location\n    joinDate\n    page {\n      description\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      bannerImage {\n        cid\n        mimeType\n        previews {\n          cid\n          size\n          mimeType\n        }\n      }\n      customLinks {\n        name\n        url\n      }\n    }\n    stats {\n      totalMinted\n      totalSold\n      floor\n    }\n    featured {\n      isFeatured\n      categories\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateBand($name: String!, $wallets: [String!]!, $asas: [String!]!, $period: Int!, $asaAmount: Int!, $coin: Float!) {\n  createBand(\n    name: $name\n    wallets: $wallets\n    asas: $asas\n    period: $period\n    asaAmount: $asaAmount\n    coin: $coin\n  )\n}"): (typeof documents)["mutation CreateBand($name: String!, $wallets: [String!]!, $asas: [String!]!, $period: Int!, $asaAmount: Int!, $coin: Float!) {\n  createBand(\n    name: $name\n    wallets: $wallets\n    asas: $asas\n    period: $period\n    asaAmount: $asaAmount\n    coin: $coin\n  )\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DeleteCollection($id: ObjectId!) {\n  deleteCollection(id: $id)\n}"): (typeof documents)["mutation DeleteCollection($id: ObjectId!) {\n  deleteCollection(id: $id)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpsertCollection($id: ObjectId, $settings: CollectionSettingsInput!) {\n  upsertCollection(id: $id, settings: $settings) {\n    id\n    title\n    normalizedTitle\n    description\n    private\n    locked\n    rarity\n    type\n    mintingAddresses {\n      address\n      active\n      locked\n    }\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        locked\n        rarityScore\n      }\n      range {\n        max\n        min\n        usedValues\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      status\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"): (typeof documents)["mutation UpsertCollection($id: ObjectId, $settings: CollectionSettingsInput!) {\n  upsertCollection(id: $id, settings: $settings) {\n    id\n    title\n    normalizedTitle\n    description\n    private\n    locked\n    rarity\n    type\n    mintingAddresses {\n      address\n      active\n      locked\n    }\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        locked\n        rarityScore\n      }\n      range {\n        max\n        min\n        usedValues\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      status\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateNewNFT($settings: NFTSettingsInput!) {\n  createNewNFT(settings: $settings) {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"): (typeof documents)["mutation CreateNewNFT($settings: NFTSettingsInput!) {\n  createNewNFT(settings: $settings) {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DeleteNFTs($ids: [ObjectId!]!) {\n  deleteNFTs(ids: $ids)\n}"): (typeof documents)["mutation DeleteNFTs($ids: [ObjectId!]!) {\n  deleteNFTs(ids: $ids)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation EditNFT($id: ObjectId!, $settings: NFTSettingsInput!) {\n  editNFT(id: $id, settings: $settings) {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"): (typeof documents)["mutation EditNFT($id: ObjectId!, $settings: NFTSettingsInput!) {\n  editNFT(id: $id, settings: $settings) {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitDeleteNFT($txns: [[SignedTxn!]!]!) {\n  submitDeleteNFT(txns: $txns) {\n    indexes\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitDeleteNFT($txns: [[SignedTxn!]!]!) {\n  submitDeleteNFT(txns: $txns) {\n    indexes\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitMintNFT($txns: [[SignedTxn!]!]!) {\n  submitMintNFT(txns: $txns) {\n    nfts {\n      id\n      status\n      stage\n      edit {\n        info\n        collection\n        media\n        token\n      }\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n      }\n      token {\n        unitName\n        assetName\n        royalty\n        editions\n      }\n      artist {\n        id\n        name\n        normalizedName\n        address\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      c {\n        id\n        title\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n    }\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitMintNFT($txns: [[SignedTxn!]!]!) {\n  submitMintNFT(txns: $txns) {\n    nfts {\n      id\n      status\n      stage\n      edit {\n        info\n        collection\n        media\n        token\n      }\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n      }\n      token {\n        unitName\n        assetName\n        royalty\n        editions\n      }\n      artist {\n        id\n        name\n        normalizedName\n        address\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      c {\n        id\n        title\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n    }\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitBuyFixedBid($txns: [[SignedTxn!]!]!) {\n  submitBuyFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitBuyFixedBid($txns: [[SignedTxn!]!]!) {\n  submitBuyFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitDeployFixedBid($txns: [[SignedTxn!]!]!) {\n  submitDeployFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitDeployFixedBid($txns: [[SignedTxn!]!]!) {\n  submitDeployFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitDepositFixedBid($txns: [[SignedTxn!]!]!) {\n  submitDepositFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitDepositFixedBid($txns: [[SignedTxn!]!]!) {\n  submitDepositFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitDestroyFixedBid($txns: [[SignedTxn!]!]!) {\n  submitDestroyFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitDestroyFixedBid($txns: [[SignedTxn!]!]!) {\n  submitDestroyFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitExtractFixedBid($txns: [[SignedTxn!]!]!) {\n  submitExtractFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitExtractFixedBid($txns: [[SignedTxn!]!]!) {\n  submitExtractFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitSetupFixedBid($txns: [[SignedTxn!]!]!) {\n  submitSetupFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitSetupFixedBid($txns: [[SignedTxn!]!]!) {\n  submitSetupFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitUpdatePriceFixedBid($txns: [[SignedTxn!]!]!) {\n  submitUpdatePriceFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitUpdatePriceFixedBid($txns: [[SignedTxn!]!]!) {\n  submitUpdatePriceFixedBid(txns: $txns) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n    }\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddNotificationSubscription($subscription: NotificationSubscription!) {\n  addNotificationSubscription(subscription: $subscription) {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}"): (typeof documents)["mutation AddNotificationSubscription($subscription: NotificationSubscription!) {\n  addNotificationSubscription(subscription: $subscription) {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RemoveNotificationSubscription($subscriptionHash: String!) {\n  removeNotificationSubscription(subscriptionHash: $subscriptionHash) {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}"): (typeof documents)["mutation RemoveNotificationSubscription($subscriptionHash: String!) {\n  removeNotificationSubscription(subscriptionHash: $subscriptionHash) {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UpdateNotificationCategories($categories: [NotificationCategoryInput!]!) {\n  updateNotificationCategories(categories: $categories) {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}"): (typeof documents)["mutation UpdateNotificationCategories($categories: [NotificationCategoryInput!]!) {\n  updateNotificationCategories(categories: $categories) {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SubmitDestroyV1Listing($txns: [[SignedTxn!]!]!) {\n  submitDestroyV1Listing(txns: $txns) {\n    listings {\n      index\n      listingAddress\n      listingProgram\n      listerAddress\n      price\n      fundingHistory {\n        date\n        amount\n      }\n      sellHistory {\n        date\n        amount\n        address\n      }\n      buyLimit\n      buyLimitOn\n      limitList {\n        amount\n        address\n      }\n    }\n    partialErrors\n  }\n}"): (typeof documents)["mutation SubmitDestroyV1Listing($txns: [[SignedTxn!]!]!) {\n  submitDestroyV1Listing(txns: $txns) {\n    listings {\n      index\n      listingAddress\n      listingProgram\n      listerAddress\n      price\n      fundingHistory {\n        date\n        amount\n      }\n      sellHistory {\n        date\n        amount\n        address\n      }\n      buyLimit\n      buyLimitOn\n      limitList {\n        amount\n        address\n      }\n    }\n    partialErrors\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query UserLoginInfo($address: AlgorandAddress!) {\n  userLoginInfo(address: $address) {\n    walletAddress\n    hasPassword\n    newUser\n  }\n  verifyTxn(address: $address) {\n    description\n    txID\n    blob\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query UserLoginInfo($address: AlgorandAddress!) {\n  userLoginInfo(address: $address) {\n    walletAddress\n    hasPassword\n    newUser\n  }\n  verifyTxn(address: $address) {\n    description\n    txID\n    blob\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetApplications($status: [ApplicationStatuses!], $offset: Int, $limit: Int) {\n  getApplications(status: $status, offset: $offset, limit: $limit) {\n    applications {\n      id\n      name\n      email\n      status\n      twitter\n      instagram\n      links\n      art\n      inviteLink\n      accountCreated\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetApplications($status: [ApplicationStatuses!], $offset: Int, $limit: Int) {\n  getApplications(status: $status, offset: $offset, limit: $limit) {\n    applications {\n      id\n      name\n      email\n      status\n      twitter\n      instagram\n      links\n      art\n      inviteLink\n      accountCreated\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetBands($status: [BandStatuses!], $offset: Int, $limit: Int) {\n  getBands(status: $status, offset: $offset, limit: $limit) {\n    bands {\n      id\n      name\n      status\n      period\n      date {\n        startDate\n        endDate\n      }\n      wallets\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetBands($status: [BandStatuses!], $offset: Int, $limit: Int) {\n  getBands(status: $status, offset: $offset, limit: $limit) {\n    bands {\n      id\n      name\n      status\n      period\n      date {\n        startDate\n        endDate\n      }\n      wallets\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetArtistDetails($id: String!) {\n  getArtistDetails(id: $id) {\n    walletAddress\n    artist {\n      name\n      normalizedName\n      page {\n        description\n        twitter\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        bannerImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        customLinks {\n          name\n          url\n        }\n      }\n      stats {\n        totalMinted\n        totalSold\n        floor\n      }\n      location\n      joinDate\n      featured {\n        isFeatured\n        categories\n      }\n    }\n    generalStats {\n      followers\n      following\n    }\n  }\n}"): (typeof documents)["query GetArtistDetails($id: String!) {\n  getArtistDetails(id: $id) {\n    walletAddress\n    artist {\n      name\n      normalizedName\n      page {\n        description\n        twitter\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        bannerImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        customLinks {\n          name\n          url\n        }\n      }\n      stats {\n        totalMinted\n        totalSold\n        floor\n      }\n      location\n      joinDate\n      featured {\n        isFeatured\n        categories\n      }\n    }\n    generalStats {\n      followers\n      following\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetArtistSettings {\n  getArtistSettings {\n    name\n    normalizedName\n    location\n    joinDate\n    page {\n      description\n      twitter\n      profileImage {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      bannerImage {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          cid\n          size\n          mimeType\n        }\n      }\n      customLinks {\n        name\n        url\n      }\n    }\n    stats {\n      totalMinted\n      totalSold\n      floor\n    }\n    featured {\n      isFeatured\n      categories\n    }\n  }\n}"): (typeof documents)["query GetArtistSettings {\n  getArtistSettings {\n    name\n    normalizedName\n    location\n    joinDate\n    page {\n      description\n      twitter\n      profileImage {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      bannerImage {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          cid\n          size\n          mimeType\n        }\n      }\n      customLinks {\n        name\n        url\n      }\n    }\n    stats {\n      totalMinted\n      totalSold\n      floor\n    }\n    featured {\n      isFeatured\n      categories\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetFeaturedArtists($skip: [ObjectId!], $limit: Int) {\n  getFeaturedArtists(skip: $skip, limit: $limit) {\n    id\n    title\n    normalizedTitle\n    artists {\n      name\n      normalizedName\n      page {\n        description\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        bannerImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        customLinks {\n          name\n          url\n        }\n      }\n      stats {\n        totalMinted\n        totalSold\n        floor\n      }\n      location\n      joinDate\n      featured {\n        isFeatured\n        categories\n      }\n    }\n  }\n}"): (typeof documents)["query GetFeaturedArtists($skip: [ObjectId!], $limit: Int) {\n  getFeaturedArtists(skip: $skip, limit: $limit) {\n    id\n    title\n    normalizedTitle\n    artists {\n      name\n      normalizedName\n      page {\n        description\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        bannerImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        customLinks {\n          name\n          url\n        }\n      }\n      stats {\n        totalMinted\n        totalSold\n        floor\n      }\n      location\n      joinDate\n      featured {\n        isFeatured\n        categories\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetTwitterVerificationLink {\n  getTwitterVerificationLink\n}"): (typeof documents)["query GetTwitterVerificationLink {\n  getTwitterVerificationLink\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SearchArtist($searchTerm: String!) {\n  searchArtist(searchTerm: $searchTerm) {\n    name\n    normalizedName\n    page {\n      description\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      bannerImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      customLinks {\n        name\n        url\n      }\n    }\n    stats {\n      totalMinted\n      totalSold\n      floor\n    }\n    location\n    joinDate\n    featured {\n      isFeatured\n      categories\n    }\n  }\n}"): (typeof documents)["query SearchArtist($searchTerm: String!) {\n  searchArtist(searchTerm: $searchTerm) {\n    name\n    normalizedName\n    page {\n      description\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      bannerImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      customLinks {\n        name\n        url\n      }\n    }\n    stats {\n      totalMinted\n      totalSold\n      floor\n    }\n    location\n    joinDate\n    featured {\n      isFeatured\n      categories\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllCollections($limit: Int, $offset: Int, $sort: CollectionSort, $skip: [String!]) {\n  getAllCollections(limit: $limit, offset: $offset, sort: $sort, skip: $skip) {\n    collections {\n      id\n      title\n      normalizedTitle\n      description\n      rarity\n      attributes {\n        traitType\n        displayType\n        values {\n          value\n          rarityScore\n        }\n        range {\n          max\n          min\n        }\n      }\n      media {\n        card {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        banner {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      artists {\n        id\n        address\n        name\n        normalizedName\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      stats {\n        nNFTs\n        sales\n        floor\n        volume\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetAllCollections($limit: Int, $offset: Int, $sort: CollectionSort, $skip: [String!]) {\n  getAllCollections(limit: $limit, offset: $offset, sort: $sort, skip: $skip) {\n    collections {\n      id\n      title\n      normalizedTitle\n      description\n      rarity\n      attributes {\n        traitType\n        displayType\n        values {\n          value\n          rarityScore\n        }\n        range {\n          max\n          min\n        }\n      }\n      media {\n        card {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        banner {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      artists {\n        id\n        address\n        name\n        normalizedName\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      stats {\n        nNFTs\n        sales\n        floor\n        volume\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCollectionDetails($id: String!) {\n  getCollectionDetails(id: $id) {\n    id\n    title\n    normalizedTitle\n    description\n    rarity\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        rarityScore\n      }\n      range {\n        max\n        min\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"): (typeof documents)["query GetCollectionDetails($id: String!) {\n  getCollectionDetails(id: $id) {\n    id\n    title\n    normalizedTitle\n    description\n    rarity\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        rarityScore\n      }\n      range {\n        max\n        min\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCollectionsByArtist($id: String!, $limit: Int, $offset: Int) {\n  getCollectionsByArtist(id: $id, limit: $limit, offset: $offset) {\n    collections {\n      id\n      title\n      normalizedTitle\n      description\n      rarity\n      attributes {\n        traitType\n        displayType\n        values {\n          value\n          rarityScore\n        }\n        range {\n          max\n          min\n        }\n      }\n      media {\n        card {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        banner {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      artists {\n        id\n        address\n        name\n        normalizedName\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      stats {\n        nNFTs\n        sales\n        floor\n        volume\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetCollectionsByArtist($id: String!, $limit: Int, $offset: Int) {\n  getCollectionsByArtist(id: $id, limit: $limit, offset: $offset) {\n    collections {\n      id\n      title\n      normalizedTitle\n      description\n      rarity\n      attributes {\n        traitType\n        displayType\n        values {\n          value\n          rarityScore\n        }\n        range {\n          max\n          min\n        }\n      }\n      media {\n        card {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n        banner {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      artists {\n        id\n        address\n        name\n        normalizedName\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      stats {\n        nNFTs\n        sales\n        floor\n        volume\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SearchCollection($searchTerm: String!) {\n  searchCollection(searchTerm: $searchTerm) {\n    id\n    title\n    normalizedTitle\n    description\n    rarity\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        rarityScore\n      }\n      range {\n        max\n        min\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"): (typeof documents)["query SearchCollection($searchTerm: String!) {\n  searchCollection(searchTerm: $searchTerm) {\n    id\n    title\n    normalizedTitle\n    description\n    rarity\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        rarityScore\n      }\n      range {\n        max\n        min\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCollectionSettings($id: ObjectId) {\n  getCollectionSettings(id: $id) {\n    id\n    title\n    normalizedTitle\n    description\n    private\n    locked\n    rarity\n    type\n    mintingAddresses {\n      address\n      active\n      locked\n    }\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        locked\n        rarityScore\n      }\n      range {\n        max\n        min\n        usedValues\n      }\n    }\n    media {\n      card {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      status\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"): (typeof documents)["query GetCollectionSettings($id: ObjectId) {\n  getCollectionSettings(id: $id) {\n    id\n    title\n    normalizedTitle\n    description\n    private\n    locked\n    rarity\n    type\n    mintingAddresses {\n      address\n      active\n      locked\n    }\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        locked\n        rarityScore\n      }\n      range {\n        max\n        min\n        usedValues\n      }\n    }\n    media {\n      card {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      status\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUserCollections {\n  getUserCollections {\n    id\n    title\n    normalizedTitle\n    description\n    private\n    locked\n    rarity\n    type\n    mintingAddresses {\n      address\n      active\n      locked\n    }\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        locked\n        rarityScore\n      }\n      range {\n        max\n        min\n        usedValues\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      status\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"): (typeof documents)["query GetUserCollections {\n  getUserCollections {\n    id\n    title\n    normalizedTitle\n    description\n    private\n    locked\n    rarity\n    type\n    mintingAddresses {\n      address\n      active\n      locked\n    }\n    attributes {\n      traitType\n      displayType\n      values {\n        value\n        locked\n        rarityScore\n      }\n      range {\n        max\n        min\n        usedValues\n      }\n    }\n    media {\n      card {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n      banner {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    artists {\n      id\n      address\n      name\n      normalizedName\n      status\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    stats {\n      nNFTs\n      sales\n      floor\n      volume\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetConceptNFTs($offset: Int, $limit: Int) {\n  getConceptNFTs(offset: $offset, limit: $limit) {\n    nfts {\n      id\n      status\n      stage\n      edit {\n        info\n        collection\n        media\n        token\n      }\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n      }\n      token {\n        unitName\n        assetName\n        royalty\n        editions\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      c {\n        id\n        title\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            cid\n            mimeType\n            size\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetConceptNFTs($offset: Int, $limit: Int) {\n  getConceptNFTs(offset: $offset, limit: $limit) {\n    nfts {\n      id\n      status\n      stage\n      edit {\n        info\n        collection\n        media\n        token\n      }\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n      }\n      token {\n        unitName\n        assetName\n        royalty\n        editions\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      c {\n        id\n        title\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            cid\n            mimeType\n            size\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetDeleteNFTParams($indexes: [Int!]!) {\n  getDeleteNFTParams(indexes: $indexes) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query GetDeleteNFTParams($indexes: [Int!]!) {\n  getDeleteNFTParams(indexes: $indexes) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetMintNFTParams($ids: [ObjectId!]!) {\n  getMintNFTParams(ids: $ids) {\n    description\n    txID\n    signers\n    signature\n    authAddress\n    blob\n  }\n}"): (typeof documents)["query GetMintNFTParams($ids: [ObjectId!]!) {\n  getMintNFTParams(ids: $ids) {\n    description\n    txID\n    signers\n    signature\n    authAddress\n    blob\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNFTSettings($id: ObjectId!) {\n  getNFTSettings(id: $id) {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetNFTSettings($id: ObjectId!) {\n  getNFTSettings(id: $id) {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNFTTemplate {\n  getNFTTemplate {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetNFTTemplate {\n  getNFTTemplate {\n    id\n    status\n    stage\n    edit {\n      info\n      collection\n      media\n      token\n    }\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n    }\n    token {\n      unitName\n      assetName\n      royalty\n      editions\n    }\n    artist {\n      id\n      name\n      normalizedName\n      address\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    c {\n      id\n      title\n      attributes {\n        traitType\n        value\n        displayType\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetBuyFixedBidParams($settings: [BuyFixedBidParams!]!) {\n  getBuyFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query GetBuyFixedBidParams($settings: [BuyFixedBidParams!]!) {\n  getBuyFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetDeployFixedBidParams($settings: [DeployFixedBidParams!]!) {\n  getDeployFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query GetDeployFixedBidParams($settings: [DeployFixedBidParams!]!) {\n  getDeployFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetDepositFixedBidParams($settings: [DepositFixedBidParams!]!) {\n  getDepositFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query GetDepositFixedBidParams($settings: [DepositFixedBidParams!]!) {\n  getDepositFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetDestroyFixedBidParams($settings: [DestroyFixedBidParams!]!) {\n  getDestroyFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query GetDestroyFixedBidParams($settings: [DestroyFixedBidParams!]!) {\n  getDestroyFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetExtractFixedBidParams($settings: [ExtractFixedBidParams!]!) {\n  getExtractFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query GetExtractFixedBidParams($settings: [ExtractFixedBidParams!]!) {\n  getExtractFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetFixedBidsByArtist($address: AlgorandAddress!, $offset: Int, $limit: Int) {\n  getFixedBidsByArtist(address: $address, offset: $offset, limit: $limit) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n      nft {\n        id\n        info {\n          title\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetFixedBidsByArtist($address: AlgorandAddress!, $offset: Int, $limit: Int) {\n  getFixedBidsByArtist(address: $address, offset: $offset, limit: $limit) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n      nft {\n        id\n        info {\n          title\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetFixedBidsByCollector($address: AlgorandAddress!, $offset: Int, $limit: Int) {\n  getFixedBidsByCollector(address: $address, offset: $offset, limit: $limit) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n      nft {\n        id\n        info {\n          title\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetFixedBidsByCollector($address: AlgorandAddress!, $offset: Int, $limit: Int) {\n  getFixedBidsByCollector(address: $address, offset: $offset, limit: $limit) {\n    listings {\n      nftIndex\n      appId\n      currency\n      sellerAddress\n      sellerPayoutAddress\n      royaltyPayoutAddress\n      managerPayoutAddress\n      sellerRevenueSink\n      royaltyRevenueSink\n      contractAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      price\n      primary\n      status {\n        deleted\n        isSetup\n        balance\n      }\n      nft {\n        id\n        info {\n          title\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetFixedBidsByNFT($index: Int!) {\n  getFixedBidsByNFT(index: $index) {\n    nftIndex\n    appId\n    currency\n    sellerAddress\n    sellerPayoutAddress\n    royaltyPayoutAddress\n    managerPayoutAddress\n    sellerRevenueSink\n    royaltyRevenueSink\n    contractAddress\n    sellerShare\n    royaltyShare\n    managerShare\n    price\n    primary\n    status {\n      deleted\n      isSetup\n      balance\n    }\n  }\n}"): (typeof documents)["query GetFixedBidsByNFT($index: Int!) {\n  getFixedBidsByNFT(index: $index) {\n    nftIndex\n    appId\n    currency\n    sellerAddress\n    sellerPayoutAddress\n    royaltyPayoutAddress\n    managerPayoutAddress\n    sellerRevenueSink\n    royaltyRevenueSink\n    contractAddress\n    sellerShare\n    royaltyShare\n    managerShare\n    price\n    primary\n    status {\n      deleted\n      isSetup\n      balance\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSetupFixedBidParams($settings: [SetupFixedBidParams!]!) {\n  getSetupFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query GetSetupFixedBidParams($settings: [SetupFixedBidParams!]!) {\n  getSetupFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUpdatePriceFixedBidParams($settings: [UpdatePriceFixedBidParams!]!) {\n  getUpdatePriceFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query GetUpdatePriceFixedBidParams($settings: [UpdatePriceFixedBidParams!]!) {\n  getUpdatePriceFixedBidParams(settings: $settings) {\n    description\n    blob\n    txID\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCollectedNFTs($address: AlgorandAddress!, $offset: Int, $limit: Int) {\n  getCollectedNFTs(address: $address, offset: $offset, limit: $limit) {\n    nfts {\n      nft {\n        id\n        info {\n          title\n          description\n          link\n          nsfw\n          ai\n          aiDescription\n          tags\n          updated\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        artist {\n          id\n          address\n          name\n          normalizedName\n          suspended\n          deleted\n          profileImage {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n        card {\n          x\n          y\n          type\n        }\n        c {\n          id\n          title\n          normalizedTitle\n          attributes {\n            traitType\n            value\n            displayType\n          }\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              cid\n              mimeType\n              size\n            }\n          }\n        }\n        metadata {\n          id\n          cid\n          mimeType\n          integrity\n          standard\n        }\n        listings {\n          listed\n          fixedBid {\n            primary\n            currency\n            price\n          }\n          auctions {\n            primary\n            currency\n            price\n            duration\n            highestBid\n            started\n          }\n        }\n        statistics {\n          sold\n          latestSale {\n            currency\n            price\n            usdValue\n          }\n        }\n        status\n      }\n      balance\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetCollectedNFTs($address: AlgorandAddress!, $offset: Int, $limit: Int) {\n  getCollectedNFTs(address: $address, offset: $offset, limit: $limit) {\n    nfts {\n      nft {\n        id\n        info {\n          title\n          description\n          link\n          nsfw\n          ai\n          aiDescription\n          tags\n          updated\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        artist {\n          id\n          address\n          name\n          normalizedName\n          suspended\n          deleted\n          profileImage {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n        card {\n          x\n          y\n          type\n        }\n        c {\n          id\n          title\n          normalizedTitle\n          attributes {\n            traitType\n            value\n            displayType\n          }\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              cid\n              mimeType\n              size\n            }\n          }\n        }\n        metadata {\n          id\n          cid\n          mimeType\n          integrity\n          standard\n        }\n        listings {\n          listed\n          fixedBid {\n            primary\n            currency\n            price\n          }\n          auctions {\n            primary\n            currency\n            price\n            duration\n            highestBid\n            started\n          }\n        }\n        statistics {\n          sold\n          latestSale {\n            currency\n            price\n            usdValue\n          }\n        }\n        status\n      }\n      balance\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCreatedNFTs($offset: Int, $limit: Int) {\n  getCreatedNFTs(offset: $offset, limit: $limit) {\n    nfts {\n      nft {\n        id\n        info {\n          title\n          description\n          link\n          nsfw\n          ai\n          aiDescription\n          tags\n          updated\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        artist {\n          id\n          address\n          name\n          normalizedName\n          suspended\n          deleted\n          profileImage {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n        card {\n          x\n          y\n          type\n        }\n        c {\n          id\n          title\n          attributes {\n            traitType\n            value\n            displayType\n          }\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              cid\n              mimeType\n              size\n            }\n          }\n        }\n        metadata {\n          id\n          cid\n          mimeType\n          integrity\n          standard\n        }\n        listings {\n          listed\n          fixedBid {\n            primary\n            currency\n            price\n          }\n          auctions {\n            primary\n            currency\n            price\n            duration\n            highestBid\n            started\n          }\n        }\n        statistics {\n          sold\n          latestSale {\n            currency\n            price\n            usdValue\n          }\n        }\n        status\n      }\n      balance\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetCreatedNFTs($offset: Int, $limit: Int) {\n  getCreatedNFTs(offset: $offset, limit: $limit) {\n    nfts {\n      nft {\n        id\n        info {\n          title\n          description\n          link\n          nsfw\n          ai\n          aiDescription\n          tags\n          updated\n        }\n        token {\n          index\n          unitName\n          assetName\n          royalty\n          editions\n          mintAddress\n          timestamp\n        }\n        artist {\n          id\n          address\n          name\n          normalizedName\n          suspended\n          deleted\n          profileImage {\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n        card {\n          x\n          y\n          type\n        }\n        c {\n          id\n          title\n          attributes {\n            traitType\n            value\n            displayType\n          }\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            cid\n            mimeType\n            previews {\n              cid\n              mimeType\n              size\n            }\n          }\n        }\n        metadata {\n          id\n          cid\n          mimeType\n          integrity\n          standard\n        }\n        listings {\n          listed\n          fixedBid {\n            primary\n            currency\n            price\n          }\n          auctions {\n            primary\n            currency\n            price\n            duration\n            highestBid\n            started\n          }\n        }\n        statistics {\n          sold\n          latestSale {\n            currency\n            price\n            usdValue\n          }\n        }\n        status\n      }\n      balance\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNFDByAddress($address: AlgorandAddress!) {\n  getNFDByAddress(address: $address) {\n    address\n    nfd {\n      i {\n        name\n        asaId\n        category\n        commission1Agent\n        commission1\n        mintingKickoffCreator\n        mintingKickoffAmount\n        highestSoldAmt\n        owner\n        sellamt\n        saleType\n        seller\n        timeCreated\n        timeChanged\n        timePurchased\n        ver\n        contractLocked\n      }\n      u {\n        name\n        bio\n        address\n        email\n        url\n        avatar\n        banner\n        twitter\n        discord\n        telegram\n        domain\n        website\n        caalgo\n      }\n      v {\n        avatar\n        avatarasaid\n        banner\n        bannerasaid\n        caAlgo\n        domain\n        twitter\n        discord\n        telegram\n      }\n    }\n  }\n}"): (typeof documents)["query GetNFDByAddress($address: AlgorandAddress!) {\n  getNFDByAddress(address: $address) {\n    address\n    nfd {\n      i {\n        name\n        asaId\n        category\n        commission1Agent\n        commission1\n        mintingKickoffCreator\n        mintingKickoffAmount\n        highestSoldAmt\n        owner\n        sellamt\n        saleType\n        seller\n        timeCreated\n        timeChanged\n        timePurchased\n        ver\n        contractLocked\n      }\n      u {\n        name\n        bio\n        address\n        email\n        url\n        avatar\n        banner\n        twitter\n        discord\n        telegram\n        domain\n        website\n        caalgo\n      }\n      v {\n        avatar\n        avatarasaid\n        banner\n        bannerasaid\n        caAlgo\n        domain\n        twitter\n        discord\n        telegram\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNFDListByAddresses($addresses: [AlgorandAddress!]!) {\n  getNFDListByAddresses(addresses: $addresses) {\n    address\n    nfd {\n      i {\n        name\n      }\n    }\n  }\n}"): (typeof documents)["query GetNFDListByAddresses($addresses: [AlgorandAddress!]!) {\n  getNFDListByAddresses(addresses: $addresses) {\n    address\n    nfd {\n      i {\n        name\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllNFTs($limit: Int, $offset: Int, $sort: AllNFTSort) {\n  getAllNFTs(limit: $limit, offset: $offset, sort: $sort) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n      status\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetAllNFTs($limit: Int, $offset: Int, $sort: AllNFTSort) {\n  getAllNFTs(limit: $limit, offset: $offset, sort: $sort) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n      status\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetListedNFTs($listingType: ListingType!, $limit: Int!, $offset: Int!, $skip: [String!]) {\n  getListedNFTs(\n    listingType: $listingType\n    limit: $limit\n    offset: $offset\n    skip: $skip\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n      status\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetListedNFTs($listingType: ListingType!, $limit: Int!, $offset: Int!, $skip: [String!]) {\n  getListedNFTs(\n    listingType: $listingType\n    limit: $limit\n    offset: $offset\n    skip: $skip\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n      status\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNFTDetails($index: Int!) {\n  getNFTDetails(index: $index) {\n    id\n    status\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n      updated\n    }\n    token {\n      index\n      unitName\n      assetName\n      royalty\n      editions\n      mintAddress\n      timestamp\n    }\n    artist {\n      id\n      address\n      name\n      normalizedName\n      suspended\n      deleted\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    c {\n      id\n      title\n      normalizedTitle\n      attributes {\n        traitType\n        value\n        displayType\n      }\n      card {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    metadata {\n      id\n      cid\n      mimeType\n      integrity\n      standard\n    }\n    listings {\n      listed\n      fixedBid {\n        primary\n        currency\n        price\n      }\n      auctions {\n        primary\n        currency\n        price\n        duration\n        highestBid\n        started\n      }\n    }\n    statistics {\n      sold\n      latestSale {\n        currency\n        price\n        usdValue\n      }\n    }\n  }\n}"): (typeof documents)["query GetNFTDetails($index: Int!) {\n  getNFTDetails(index: $index) {\n    id\n    status\n    info {\n      title\n      description\n      link\n      nsfw\n      ai\n      aiDescription\n      tags\n      updated\n    }\n    token {\n      index\n      unitName\n      assetName\n      royalty\n      editions\n      mintAddress\n      timestamp\n    }\n    artist {\n      id\n      address\n      name\n      normalizedName\n      suspended\n      deleted\n      profileImage {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    card {\n      x\n      y\n      type\n    }\n    c {\n      id\n      title\n      normalizedTitle\n      attributes {\n        traitType\n        value\n        displayType\n      }\n      card {\n        fileroomId\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n    metadata {\n      id\n      cid\n      mimeType\n      integrity\n      standard\n    }\n    listings {\n      listed\n      fixedBid {\n        primary\n        currency\n        price\n      }\n      auctions {\n        primary\n        currency\n        price\n        duration\n        highestBid\n        started\n      }\n    }\n    statistics {\n      sold\n      latestSale {\n        currency\n        price\n        usdValue\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNFTOwners($index: Int!) {\n  getNFTOwners(index: $index) {\n    address\n    walletBalance\n    listingBalance\n  }\n}"): (typeof documents)["query GetNFTOwners($index: Int!) {\n  getNFTOwners(index: $index) {\n    address\n    walletBalance\n    listingBalance\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNFTsByArtist($id: String!, $limit: Int!, $offset: Int!, $sort: NFTSort, $status: NFTSaleStatus) {\n  getNFTsByArtist(\n    id: $id\n    limit: $limit\n    offset: $offset\n    sort: $sort\n    status: $status\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetNFTsByArtist($id: String!, $limit: Int!, $offset: Int!, $sort: NFTSort, $status: NFTSaleStatus) {\n  getNFTsByArtist(\n    id: $id\n    limit: $limit\n    offset: $offset\n    sort: $sort\n    status: $status\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNFTsByCollection($id: String!, $limit: Int!, $offset: Int!, $sort: NFTSort, $status: NFTSaleStatus) {\n  getNFTsByCollection(\n    id: $id\n    limit: $limit\n    offset: $offset\n    sort: $sort\n    status: $status\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetNFTsByCollection($id: String!, $limit: Int!, $offset: Int!, $sort: NFTSort, $status: NFTSaleStatus) {\n  getNFTsByCollection(\n    id: $id\n    limit: $limit\n    offset: $offset\n    sort: $sort\n    status: $status\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNFTsByCollector($id: AlgorandAddress!, $limit: Int!, $offset: Int!, $sort: NFTCollectedSort, $status: NFTCollectedStatus) {\n  getNFTsByCollector(\n    id: $id\n    limit: $limit\n    offset: $offset\n    sort: $sort\n    status: $status\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetNFTsByCollector($id: AlgorandAddress!, $limit: Int!, $offset: Int!, $sort: NFTCollectedSort, $status: NFTCollectedStatus) {\n  getNFTsByCollector(\n    id: $id\n    limit: $limit\n    offset: $offset\n    sort: $sort\n    status: $status\n  ) {\n    nfts {\n      id\n      info {\n        title\n        description\n        link\n        nsfw\n        ai\n        aiDescription\n        tags\n        updated\n      }\n      token {\n        index\n        unitName\n        assetName\n        royalty\n        editions\n        mintAddress\n        timestamp\n      }\n      artist {\n        id\n        address\n        name\n        normalizedName\n        suspended\n        deleted\n        profileImage {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      card {\n        x\n        y\n        type\n      }\n      c {\n        id\n        title\n        normalizedTitle\n        attributes {\n          traitType\n          value\n          displayType\n        }\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n      metadata {\n        id\n        cid\n        mimeType\n        integrity\n        standard\n      }\n      listings {\n        listed\n        fixedBid {\n          primary\n          currency\n          price\n        }\n        auctions {\n          primary\n          currency\n          price\n          duration\n          highestBid\n          started\n        }\n      }\n      statistics {\n        sold\n        latestSale {\n          currency\n          price\n          usdValue\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SearchNFT($searchTerm: String!) {\n  searchNFT(searchTerm: $searchTerm) {\n    id\n    info {\n      title\n    }\n    token {\n      index\n    }\n    artist {\n      name\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query SearchNFT($searchTerm: String!) {\n  searchNFT(searchTerm: $searchTerm) {\n    id\n    info {\n      title\n    }\n    token {\n      index\n    }\n    artist {\n      name\n    }\n    media {\n      fileroomId\n      cid\n      dimensions\n      storageSize\n      mimeType\n      integrity\n      previews {\n        size\n        cid\n        mimeType\n        integrity\n      }\n      thumbnail {\n        cid\n        mimeType\n        previews {\n          size\n          cid\n          mimeType\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetNotificationSettings {\n  getNotificationSettings {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}"): (typeof documents)["query GetNotificationSettings {\n  getNotificationSettings {\n    subscriptions\n    enabled {\n      type\n      category\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TestNotification {\n  testNotification\n}"): (typeof documents)["query TestNotification {\n  testNotification\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCurrentQuotes($fiat: [FiatCode!]!, $asa: [AsaCode!]!) {\n  getCurrentQuotes(fiat: $fiat, asa: $asa) {\n    timestamp\n    quotes\n  }\n}"): (typeof documents)["query GetCurrentQuotes($fiat: [FiatCode!]!, $asa: [AsaCode!]!) {\n  getCurrentQuotes(fiat: $fiat, asa: $asa) {\n    timestamp\n    quotes\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetHistoricalQuotes($fiat: [FiatCode!]!, $asa: [AsaCode!]!, $range: TimeRange!) {\n  getHistoricalQuotes(fiat: $fiat, asa: $asa, range: $range) {\n    timestamp\n    quotes\n  }\n}"): (typeof documents)["query GetHistoricalQuotes($fiat: [FiatCode!]!, $asa: [AsaCode!]!, $range: TimeRange!) {\n  getHistoricalQuotes(fiat: $fiat, asa: $asa, range: $range) {\n    timestamp\n    quotes\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetAllSales($offset: Int, $limit: Int, $sort: SaleSortingOptions, $filter: SaleFilter) {\n  getAllSales(offset: $offset, limit: $limit, sort: $sort, filter: $filter) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n      nft {\n        token {\n          index\n        }\n        info {\n          title\n          nsfw\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            fileroomId\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetAllSales($offset: Int, $limit: Int, $sort: SaleSortingOptions, $filter: SaleFilter) {\n  getAllSales(offset: $offset, limit: $limit, sort: $sort, filter: $filter) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n      nft {\n        token {\n          index\n        }\n        info {\n          title\n          nsfw\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            fileroomId\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSalesByArtist($id: String!, $offset: Int, $limit: Int) {\n  getSalesByArtist(id: $id, offset: $offset, limit: $limit) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n      nft {\n        token {\n          index\n        }\n        info {\n          title\n          nsfw\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            fileroomId\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetSalesByArtist($id: String!, $offset: Int, $limit: Int) {\n  getSalesByArtist(id: $id, offset: $offset, limit: $limit) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n      nft {\n        token {\n          index\n        }\n        info {\n          title\n          nsfw\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            fileroomId\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSalesByCollection($id: String!, $offset: Int, $limit: Int) {\n  getSalesByCollection(id: $id, offset: $offset, limit: $limit) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n      nft {\n        token {\n          index\n        }\n        info {\n          title\n          nsfw\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            fileroomId\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetSalesByCollection($id: String!, $offset: Int, $limit: Int) {\n  getSalesByCollection(id: $id, offset: $offset, limit: $limit) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n      nft {\n        token {\n          index\n        }\n        info {\n          title\n          nsfw\n        }\n        media {\n          fileroomId\n          cid\n          dimensions\n          storageSize\n          mimeType\n          integrity\n          previews {\n            size\n            cid\n            mimeType\n            integrity\n          }\n          thumbnail {\n            fileroomId\n            cid\n            mimeType\n            previews {\n              size\n              cid\n              mimeType\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSalesByNFT($limit: Int, $index: Int!, $offset: Int) {\n  getSalesByNFT(limit: $limit, index: $index, offset: $offset) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"): (typeof documents)["query GetSalesByNFT($limit: Int, $index: Int!, $offset: Int) {\n  getSalesByNFT(limit: $limit, index: $index, offset: $offset) {\n    sales {\n      saleType\n      nftIndex\n      appId\n      currency\n      unitPrice\n      nNFTs\n      totalPrice\n      txIDs\n      groupId\n      sellerAddress\n      royaltyAddres\n      buyerAddress\n      sellerShare\n      royaltyShare\n      managerShare\n      round\n      timestamp\n      primary\n      totalValue\n    }\n    pageInfo {\n      totalDocs\n      offset\n      limit\n      totalPages\n      page\n      hasPrevPage\n      hasNextPage\n      prevPage\n      nextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetDestroyV1ListingParams($settings: [DestroyV1ListingParams!]!) {\n  getDestroyV1ListingParams(settings: $settings) {\n    description\n    txID\n    signers\n    signature\n    authAddress\n    blob\n  }\n}"): (typeof documents)["query GetDestroyV1ListingParams($settings: [DestroyV1ListingParams!]!) {\n  getDestroyV1ListingParams(settings: $settings) {\n    description\n    txID\n    signers\n    signature\n    authAddress\n    blob\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetV1ListingsByAddress($address: AlgorandAddress) {\n  getV1ListingsByAddress(address: $address) {\n    index\n    listingAddress\n    listingProgram\n    listerAddress\n    price\n    fundingHistory {\n      date\n      amount\n    }\n    sellHistory {\n      date\n      amount\n      address\n    }\n    buyLimit\n    buyLimitOn\n    limitList {\n      amount\n      address\n    }\n  }\n}"): (typeof documents)["query GetV1ListingsByAddress($address: AlgorandAddress) {\n  getV1ListingsByAddress(address: $address) {\n    index\n    listingAddress\n    listingProgram\n    listerAddress\n    price\n    fundingHistory {\n      date\n      amount\n    }\n    sellHistory {\n      date\n      amount\n      address\n    }\n    buyLimit\n    buyLimitOn\n    limitList {\n      amount\n      address\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query VerifyTxn($address: AlgorandAddress!) {\n  verifyTxn(address: $address) {\n    description\n    txID\n    blob\n    signers\n    signature\n    authAddress\n  }\n}"): (typeof documents)["query VerifyTxn($address: AlgorandAddress!) {\n  verifyTxn(address: $address) {\n    description\n    txID\n    blob\n    signers\n    signature\n    authAddress\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ViewApplicationStatus($id: ObjectId!, $token: String!) {\n  viewApplicationStatus(id: $id, token: $token) {\n    status\n    emailVerified\n    socialsAdded\n    requiresArt\n    artUploaded\n    links\n    instagram\n    twitter\n  }\n}"): (typeof documents)["query ViewApplicationStatus($id: ObjectId!, $token: String!) {\n  viewApplicationStatus(id: $id, token: $token) {\n    status\n    emailVerified\n    socialsAdded\n    requiresArt\n    artUploaded\n    links\n    instagram\n    twitter\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription NewApplications {\n  newApplications {\n    id\n    name\n    email\n    status\n    twitter\n    instagram\n    links\n    art\n  }\n}"): (typeof documents)["subscription NewApplications {\n  newApplications {\n    id\n    name\n    email\n    status\n    twitter\n    instagram\n    links\n    art\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription NewBands {\n  newBands {\n    id\n    name\n    status\n  }\n}"): (typeof documents)["subscription NewBands {\n  newBands {\n    id\n    name\n    status\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription SubAllNewSales {\n  subAllNewSales {\n    saleType\n    nftIndex\n    appId\n    currency\n    unitPrice\n    nNFTs\n    totalPrice\n    totalValue\n    txIDs\n    groupId\n    sellerAddress\n    royaltyAddres\n    buyerAddress\n    sellerShare\n    royaltyShare\n    managerShare\n    round\n    timestamp\n    primary\n    nft {\n      token {\n        index\n      }\n      info {\n        title\n        nsfw\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          fileroomId\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["subscription SubAllNewSales {\n  subAllNewSales {\n    saleType\n    nftIndex\n    appId\n    currency\n    unitPrice\n    nNFTs\n    totalPrice\n    totalValue\n    txIDs\n    groupId\n    sellerAddress\n    royaltyAddres\n    buyerAddress\n    sellerShare\n    royaltyShare\n    managerShare\n    round\n    timestamp\n    primary\n    nft {\n      token {\n        index\n      }\n      info {\n        title\n        nsfw\n      }\n      media {\n        fileroomId\n        cid\n        dimensions\n        storageSize\n        mimeType\n        integrity\n        previews {\n          size\n          cid\n          mimeType\n          integrity\n        }\n        thumbnail {\n          fileroomId\n          cid\n          mimeType\n          previews {\n            size\n            cid\n            mimeType\n          }\n        }\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;